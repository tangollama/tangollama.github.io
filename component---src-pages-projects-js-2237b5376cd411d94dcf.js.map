{"version":3,"file":"component---src-pages-projects-js-2237b5376cd411d94dcf.js","mappings":"mLAMA,mBAAe,GAAe,IAAZA,EAAW,EAAXA,KACVC,EAAcD,EAAKE,OAAOC,OAAS,GACnCC,EAAoBJ,EAAKK,QAAQF,OAAS,GAE1CG,EAAmBC,EAAAA,GAAAA,YAAkBH,EAD7B,sBACuD,EAAM,GAE3E,OACE,gBAAC,KAAD,KACE,gBAAC,KAAD,CAAKI,MAAM,aACX,gBAAC,KAAD,CAAWA,MAAM,aACjB,gBAAC,IAAD,CAAWC,UAAU,aACnB,+BACGR,EAAYS,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACf,uBAAKC,IAAKD,EAAKE,GAAIJ,UAAU,OAC3B,gBAAC,KAAD,CACEK,GAAIH,EAAKI,OAAOC,KAChBC,eAAgBX,EAAiBK,EAAKI,OAAOC,MAC7CR,MAAOG,EAAKO,YAAYV,MACxBW,KAAMR,EAAKO,YAAYC,KACvBC,QAAST,EAAKS,UAEhB,oC,6FCzBd,G,QAAA,CACEC,YAAa,SAACC,EAAQC,EAAOC,EAA2BC,GAEtD,YAFoE,IAAzCD,IAAAA,GAAoB,QAAqB,IAAdC,IAAAA,EAAQ,GAEvDH,EAAOI,QAAO,SAAChB,EAAKiB,GACzB,IAAMX,EAAOW,EAAMhB,KAAKiB,aAAaC,MAAMN,GAAO,GAE5CO,EAAMH,EAAMhB,KAElB,GAAIa,EACF,GAAId,EAAIqB,eAAef,GACjBN,EAAIM,GAAMgB,QAAUP,GAAOf,EAAIM,GAAMiB,KAAKH,OACzC,CACL,IAAMI,EAAM,GACZA,EAAID,KAAKH,GACTpB,EAAIM,GAAQkB,OAGdxB,EAAIM,GAAQc,EAEd,OAAOpB,IACN","sources":["webpack://tangollama.github.io/./src/pages/projects.js","webpack://tangollama.github.io/./src/utils/helpers.js"],"sourcesContent":["import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { PageLayout, PageTitle, ProjectLink } from \"../components\";\nimport { SEO, Utils } from \"../utils\";\nimport Container from \"react-bootstrap/Container\";\n\nexport default ({ data }) => {\n  const allProjects = data.allMdx.edges || [];\n  const allFeaturedImages = data.allFile.edges || [];\n  const regex = /\\/[projects].*\\/|$/;\n  const featuredImageMap = Utils.getImageMap(allFeaturedImages, regex, true, 3);\n\n  return (\n    <PageLayout>\n      <SEO title=\"Projects\" />\n      <PageTitle title=\"Projects\" />\n      <Container className=\"text-left\">\n        <section>\n          {allProjects.map(({ node }) => (\n            <div key={node.id} className=\"p-3\">\n              <ProjectLink\n                to={node.fields.slug}\n                featuredImages={featuredImageMap[node.fields.slug]}\n                title={node.frontmatter.title}\n                tags={node.frontmatter.tags}\n                excerpt={node.excerpt}\n              />\n              <hr />\n            </div>\n          ))}\n        </section>\n      </Container>\n    </PageLayout>\n  );\n};\n\nexport const query = graphql`\n  query {\n    allMdx(\n      filter: { fileAbsolutePath: { regex: \"/projects/\" } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          timeToRead\n          frontmatter {\n            title\n            description\n            tags\n            date(formatString: \"DD MMMM, YYYY\")\n          }\n          fields {\n            slug\n          }\n          excerpt\n        }\n      }\n    }\n    allFile(\n      filter: {\n        extension: { eq: \"png\" }\n        relativePath: { regex: \"/feature/\" }\n        relativeDirectory: { regex: \"/content/projects/\" }\n      }\n    ) {\n      edges {\n        node {\n          childImageSharp {\n            gatsbyImageData(layout: CONSTRAINED)\n          }\n          relativePath\n        }\n      }\n    }\n  }\n`;\n","import { getSrc } from \"gatsby-plugin-image\";\n\nexport default {\n  getImageMap: (images, regex, hasMultipleImages = false, limit = 3) => {\n    //console.debug(images);\n    return images.reduce((map, image) => {\n      const slug = image.node.relativePath.match(regex)[0];\n      //const img = getSrc(image.node);\n      const img = image.node;\n      //console.debug(img);\n      if (hasMultipleImages) {\n        if (map.hasOwnProperty(slug)) {\n          if (map[slug].length <= limit) map[slug].push(img);\n        } else {\n          const arr = [];\n          arr.push(img);\n          map[slug] = arr;\n        }\n      } else {\n        map[slug] = img;\n      }\n      return map;\n    }, {});\n  },\n};\n"],"names":["data","allProjects","allMdx","edges","allFeaturedImages","allFile","featuredImageMap","Utils","title","className","map","node","key","id","to","fields","slug","featuredImages","frontmatter","tags","excerpt","getImageMap","images","regex","hasMultipleImages","limit","reduce","image","relativePath","match","img","hasOwnProperty","length","push","arr"],"sourceRoot":""}