{"version":3,"sources":["webpack:///./src/pages/talks.js","webpack:///./src/utils/helpers.js"],"names":["data","allFeaturedImages","allFile","edges","allPosts","allMdx","featuredImageMap","Utils","getImageMap","title","fluid","className","map","node","key","id","to","fields","slug","featuredImage","frontmatter","subtitle","date","excerpt","images","regex","hasMultipleImages","limit","reduce","image","relativePath","match","hasOwnProperty","length","push","childImageSharp","arr"],"mappings":"8FAAA,oEAMe,sBAAe,IAAZA,EAAW,EAAXA,KACVC,EAAoBD,EAAKE,QAAQC,OAAS,GAC1CC,EAAWJ,EAAKK,OAAOF,OAAS,GAEhCG,EAAmBC,IAAMC,YAAYP,EAD7B,mBAGd,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKQ,MAAM,UACX,kBAAC,IAAD,CAAWA,MAAM,UACjB,0EACA,kBAAC,IAAD,CACEC,OAAK,EACLC,UAAU,gEAETP,EAASQ,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACZ,yBAAKC,IAAKD,EAAKE,GAAIJ,UAAU,OAC3B,kBAAC,IAAD,CACEK,GAAIH,EAAKI,OAAOC,KAChBC,cAAeb,EAAiBO,EAAKI,OAAOC,MAC5CT,MAAOI,EAAKO,YAAYX,MACxBY,SAAUR,EAAKO,YAAYE,KAC3BC,QAASV,EAAKO,YAAYG,kB,0HC5BzB,G,oBAAA,CACbf,YAAa,SAACgB,EAAQC,EAAOC,EAA2BC,GACtD,YADoE,IAAzCD,OAAoB,QAAqB,IAAdC,MAAQ,GACvDH,EAAOI,QAAO,SAAChB,EAAKiB,GACzB,IAAMX,EAAOW,EAAMhB,KAAKiB,aAAaC,MAAMN,GAAO,GAClD,GAAIC,EACF,GAAId,EAAIoB,eAAed,GACjBN,EAAIM,GAAMe,QAAUN,GACtBf,EAAIM,GAAMgB,KAAKL,EAAMhB,KAAKsB,gBAAgBzB,WACvC,CACL,IAAM0B,EAAM,GACZA,EAAIF,KAAKL,EAAMhB,KAAKsB,gBAAgBzB,OACpCE,EAAIM,GAAQkB,OAGdxB,EAAIM,GAAQW,EAAMhB,KAAKsB,gBAAgBzB,MAEzC,OAAOE,IACN","file":"component---src-pages-talks-js-2e8efc463ab3f721ea51.js","sourcesContent":["import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { PageLayout, PageTitle, BlogLink } from \"../components\";\nimport { SEO, Utils } from \"../utils\";\nimport { Container } from \"react-bootstrap\";\n\nexport default ({ data }) => {\n  const allFeaturedImages = data.allFile.edges || [];\n  const allPosts = data.allMdx.edges || [];\n  const regex = /\\/[talks].*\\/|$/;\n  const featuredImageMap = Utils.getImageMap(allFeaturedImages, regex);\n  // console.debug([allPosts, featuredImageMap]);\n  return (\n    <PageLayout>\n      <SEO title=\"Talks\" />\n      <PageTitle title=\"Talks\" />\n      <p>Check out a few of my public presentations.</p>\n      <Container\n        fluid\n        className=\"p-3 w-auto text-left d-flex flex-wrap justify-content-center\"\n      >\n        {allPosts.map(({ node }) => (\n          <div key={node.id} className=\"p-3\">\n            <BlogLink\n              to={node.fields.slug}\n              featuredImage={featuredImageMap[node.fields.slug]}\n              title={node.frontmatter.title}\n              subtitle={node.frontmatter.date}\n              excerpt={node.frontmatter.excerpt}\n            />\n          </div>\n        ))}\n      </Container>\n    </PageLayout>\n  );\n};\n\nexport const query = graphql`\n  query {\n    allMdx(\n      filter: { fileAbsolutePath: { regex: \"/talks/\" } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            description\n            tags\n            author\n            date(formatString: \"DD MMMM, YYYY\")\n            excerpt\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n    allFile(\n      filter: {\n        extension: { in: [\"jpg\", \"png\"] }\n        relativePath: { regex: \"/feature/\" }\n        relativeDirectory: { regex: \"/content/talks/\" }\n      }\n    ) {\n      edges {\n        node {\n          childImageSharp {\n            fluid(maxWidth: 400) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n          relativePath\n        }\n      }\n    }\n  }\n`;\n","export default {\n  getImageMap: (images, regex, hasMultipleImages = false, limit = 3) => {\n    return images.reduce((map, image) => {\n      const slug = image.node.relativePath.match(regex)[0];\n      if (hasMultipleImages) {\n        if (map.hasOwnProperty(slug)) {\n          if (map[slug].length <= limit)\n            map[slug].push(image.node.childImageSharp.fluid);\n        } else {\n          const arr = [];\n          arr.push(image.node.childImageSharp.fluid);\n          map[slug] = arr;\n        }\n      } else {\n        map[slug] = image.node.childImageSharp.fluid;\n      }\n      return map;\n    }, {});\n  },\n};\n"],"sourceRoot":""}